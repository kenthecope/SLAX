/* 
This script will free up as much space as possible on an EX VC stack. It merciliessly deletes
probably unused files and software packages.  

Authors: Ken Cope  kcope@juniper.net
         Jesse Fish jfish@juniper.net
Contributers:  Mark Misola mmisola@juniper.net
               Peter Baumgartner pbaumgartner@juniper.net 

Last modified: 06.08.2024
- 06.08.2024: change all jcs:execute rpc calls to jcs:invoke
- 05.08.2024: removed recovery snapshot deletetion as it creates a lot of follow on problems and does not
              appear to free up any extra storage space
- 25.07.2024: fixed spelling error bug for recovery snapshot deletion
- 17.04.2024: added deletetion of recovery snapshots when aggresiveness is "aggressive" or "lastresort"
- 19.05.2023: clean out /var/log and /var/tmp beyond what request system storage cleanup does
              removes any files that are older than 2 days except active log and trace files
- 14.02.2023: add argument "aggressiveness" to control how many packages are cleaned out, use the "lastresort" option
  for aggressiveness to clean out packages that may cause an error, or "aggressive" to clean out packages that usually
  aren't needed, but has a slight chance of causing a db error.  added a commit with a short comment at the 
  end of the run to make sure that /var/run/db databaes have their version upgraded to try to keep Junos Space
  syhcnronized for the more aggressive cleanout options
- 31.01.2023: add option @ISLOCAL = "false" so script will run staged from Junos Space, thanks to Jessie Fish
  set this to true if the script is alredy on the switch and Space should just run it instead of staging it
- functionzed all calls and added extra directories to delete.  Cleaned up reporting and fixed
  preservation of ssh directories and authroized keys.  Added cleanup of /var/home and all 
  /var/home subdirectories
- fixed file cleanup on VC members
- remove files in user's home director execpt for .ssh directory
- remove files in /var/log/shmlog/arg dir on all vc members
- system storage clean up on all vcs
- remove extra and seldom used junos packages
- remove snapshots
- restore the DHCP snooping, SLACC and DHCP databases after cleanup

Known bugs:  
- Removal of files in the cleanup_dirs doesn't report file sizes
- Possible out of sync with Junos space, added commit at end to try to resolve this, which seems to result
  from packages that are used to validate sections of the config that are no longer on the system.  These cause
  errors in the syslog like UI_DBASE_MISMATCH_SEQUENCE and UI_DBASE_OPEN_FAILED .awaiting testing results
  to see if the aggressiveness options allievate this issue.  Active netconf connections also seem to need to
  be closed and restarted if some packages are removed or added.
*/

version 1.1;
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
ns date = "http://exslt.org/dates-and-times";
ns func extension = "http://exslt.org/functions";
ns cleanup extension = "http://xml.juniper.net/cleanup";

import "../import/junos.xsl";

param $member;
param $fpc;
param $file-information;
param $aggressiveness;

var $arguments = {
  <argument> {
    <name> "aggressiveness";
    <description> "How aggressively do we clean out the space (standard|aggressive|lastresort)";
  }
}

/* Junos Space annotations: https://www.juniper.net/documentation/us/en/software/junos-space21.2/junos-space-workspaces/topics/concept/scripts-annotations.html */
/* @NAME = "FreeUpSpace" */
/* @DESCRIPTION = "Mercilessly Free Up Space on an EX VC Stack" */
/* ISLOCAL: This annotation is used to define whether the script is to be executed locally or staged on the device.  */
/* @ISLOCAL = "true" */

/* connection to the local system that we are executing this script on*/
param $local = jcs:open();

/* packages to delete -- make sure old is the last in the list */
/* Removing /var/log/db.log.0.gz                                                   
Removing /packages/sets/active/optional/jdocs-ex                                

*/
var $del_packages := {
   <package> "jweb-ex";
   <package> "old";
} 

/* packages to aggressively delete -- make sure old is the last in the list */
var $del_packages_aggressive := {
   <package> "jweb-ex";
   <package> "optional";
   <package> "py-base";
   <package> "py-base2";
   <package> "py-extensions";
   <package> "py-extensions2";
   <package> "old";
} 

/* packages to aggressively delete as a last resort -- make sure old is the last in the list */
var $del_packages_lastresort := {
   <package> "jweb-ex";
   <package> "optional";
   <package> "jphone-home";
   <package> "jail-runtime";
   <package> "jdocs-ex";
   <package> "jsd-jet-1";
   <package> "jsdn";
   <package> "py-base";
   <package> "py-base2";
   <package> "py-extensions";
   <package> "py-extensions2";
   <package> "old";
} 

/* Extra directories to clean up and out, everyting in each directory will be recursively cleaned out */
var $cleanup_dirs := {
   <directory> "/var/log/shmlog/arg/";
} 

/* /var/log files to preserve */
var $preserve_var_log := {
   <file> "chassisd";
   <file> "dcd";
   <file> "software_install_status.log";
   <file> "wtmp";
}

/* /var/tmp/ files to preserver */
var $preserve_var_tmp := {
   <file> "LOCK_FILE";
   <file> "DHCPv6.db";
   <file> "DHCPv4.db";
}

/* Maximium age of a file - 1 day and 1 second */
var $max_age = 86401;  

match / {
    <op-script-results> {
        /* Let the user know to what level of cleaning we are doing */
        if ( $aggressiveness == 'lastresort' ) {
            expr jcs:output("Performing a LAST RESORT disk space cleanup!");
            expr jcs:output("BEWARE: This deletes the recovery snapshot!!!!");
            expr jcs:output("YOU WILL NEED TO UPGRADE JUNOS IMMEDIATELY AFTER THIS COMPLETES!");
        }
        else if ( $aggressiveness == 'aggressive' ) {
            expr jcs:output("Performing an AGGRESSIVE disk space cleanup!");
            expr jcs:output("BEWARE: This deletes the recovery snapshot!!!!");
            expr jcs:output("This removes several software packages which usually are not needed! You may need to reboot after this finishes!");
        }
        else {
            expr jcs:output("Performing a standard disk space cleanup!");
        }

        /* Get the active syslog files */
        expr jcs:output( "Querying configuration to find active syslog files:" );
        var $get-syslog-config-rpc = <get-configuration database="committed" inherit="inherit"> {
                                         <configuration> {
                                             <system> {
                                                 <syslog>;
                                             }
                                         }
                                      }

        /* grab a copy of the syslog config so we don't delete any active syslog files if combing /var/log */
        var $syslog-config = jcs:invoke( $get-syslog-config-rpc );
        var $syslog-files = $syslog-config/system/syslog/file/name;
        copy-of $syslog-files;

        /* Get the member id  of the virtual chassis to loop through some cleanup commands on each VC member */
        var $vc_info = jcs:invoke('get-virtual-chassis-information');

        /* loop through each member and free up space that doesnt work on all-members */
        for-each( $vc_info//member-list/member/member-id ) {
            /* strip any spaces out */
            var $member = translate(., ' ', '');
            var $fpc = concat ('fpc', $member, ':');
            expr jcs:output(concat("Freeing Space on VC member: ", $member));

            /* delete seldom used junos packages that are not needed when a system is upgraded */

            /* system storage cleanup */
            var $cleanup_storage = cleanup:storage($member);

            /* delete non-recovery snaphosts */
            var $cleanup_snapshots = cleanup:snapshots($member);

            /* delete seldom used junos packages that are not needed when a system is upgraded */
            var $cleanup_packages = cleanup:packages($member, $aggressiveness);


            /* Delete all files in logged in all users home dirs */
            var $home_files_rpc = {
                <file-list> {
                    <path> concat($fpc, "/var/home/");
                    <detail>;
                }
            }

            var $home_files_result = jcs:invoke($local, $home_files_rpc);
            expr jcs:output(concat( " - cleaning member ", $member, " directory ", $home_files_result//directory/directory-name));

            /* Remove any files in /var/home */
            for-each ($home_files_result//directory-list/directory/file-information) {
               /* Files in /var/home */
               var $delete-file-result = cleanup:delete-file($fpc, ., "/var/home");
            }

            /* Remove all files and subdirs in the /var/home folder except ssh related items */
            for-each ($home_files_result//directory-list/directory/file-information[file-directory]) {
               /* directories in /var/home */
               /* save the sub directory name for later use */
               var $subdir = ./file-name;
               var $directory = concat("/var/home/", $subdir, "/");
               /* Now list all of the contents of each of these subdirs */
               var $user_files_rpc = {
                   <file-list> {
                       <path> concat($fpc, "/var/home/", $subdir);
                       <detail>;
                   }
               }
               var $user_files_result = jcs:invoke($local, $user_files_rpc);
               for-each ($user_files_result//directory-list/directory/file-information) {
                   expr jcs:output(concat( " - cleaning member ", $member, " directory ", $directory));
                   /* Delete files */
                   var $delete_subdir_files_result = cleanup:delete-file($fpc, ., $directory);
                   /* Recursively delete directories */
                   var $delete_subdirs_result = cleanup:delete-dir($fpc, ., $subdir);
               }
            }

            /* Delete the SHMLOG contents */
            for-each ($cleanup_dirs/directory) {
                expr jcs:output(concat( " - cleaning member ", $member, " directory ", .));
                var $delete_extra_dir_result = cleanup:cleanup-dir($fpc, .);
                /* var $cleanup_shmlog = cleanup:shmlog($fpc); */
            }

            /* Delete files in /var/log */ 
            expr jcs:output(concat( " - cleaning member ", $member, " directory ", "/var/log"));
            var $delete_var_log_files_result = cleanup:cleanup-dir-age($fpc, "/var/log", $preserve_var_log, $syslog-files, $max_age);

            /* Delete files in /var/tmp */ 
            expr jcs:output(concat( " - cleaning member ", $member, " directory ", "/var/tmp"));
            var $delete_var_tmp_files_result = cleanup:cleanup-dir-age($fpc, "/var/tmp", $preserve_var_tmp, $syslog-files, $max_age);
        }

        /* Save any services that use some sort of persistent file storage */
        expr jcs:output( "Querying configuration to find persistant storage locations:" );
        var $get-config-rpc = <get-configuration database="committed" inherit="inherit"> {
                                 <configuration> {
                                     <system> {
                                         <processes>;
                                     }
                                 }
                              }

        /* grab a copy of the config */
        var $configuration = jcs:invoke( $get-config-rpc );

        /* Save the DHCPv4 Snooping Database */
        var $cleanup_dhcpv4 = cleanup:dhcpv4($configuration);

        /* Save the DHCPv6 Snooping Database */
        var $cleanup_dhcpv6 = cleanup:dhcpv6($configuration);

        /* Save the SLAAC Snooping Database */
        var $cleanup_slaac = cleanup:slaac($configuration);


        /* Final for warning aggressive cleanups */
        if ( $aggressiveness == 'lastresort' ) {
            expr jcs:output('Finished LAST RESORT disk space cleanup!');
            expr jcs:output('DO NOT REBOOT! UPGRADE JUNOS IMMEDIATELY!!!');
        }
        if ( $aggressiveness == 'aggressive' ) {
            expr jcs:output('Finished AGGRESSIVE disk space cleanup!');
            expr jcs:output('You may need to reboot the device!!!');
        }

        var $tracefiles = cleanup:report-tracefiles();
 
        expr jcs:close($local);
    }
}

/* function to cleanup the contents of a directory 
 * this takes the fpc (fpc0, fpc1, etc) and the file as an argument
 * preserve which are files that should not be removed
 * age - seconds from todays date at which older files should be removed
 * as well as the direcotory name to be cleaned out
 */
function cleanup:cleanup-dir-age ( $fpc, $directory, $preserve, $system-syslog-files, $age) { 

    /* set a mutable variable to keep track of if we deleted the file or not, -1 means not deleted, anything else is the file size 
     *  in bytes
     */
    mvar $deleted = -1;
    /* variable to determine if we want to preserve a file or not, keep the file by default */
    mvar $keep = 1;
    mvar $syslog-files := {
        <empty> "nothing";
    } 

    /* get a list of the files in the directory provided */
    var $cleanup_files_rpc = {
        <file-list> {
            <path> concat($fpc,  $directory);
            <detail>;
        }
    }
    var $cleanup_files_result = jcs:invoke($local, $cleanup_files_rpc);

    /* check if looking at the log dir */
    if ( $directory == "/var/log" ){
        set $syslog-files = $system-syslog-files;
    }

    /* iterate through the files list */
    for-each ($cleanup_files_result//directory-list/directory/file-information) {
        /* LIST THE FILE */
        set $keep = 1;
        var $file-name = ./file-name;
        /* skip directories */
        if ( not(./file-directory )) {
            if (date:seconds() - ./file-date > $age ) {
                set $keep = 0;
                for-each ($syslog-files) {
                    /* expr jcs:output(concat(" **** SYSLOG FILE:", $fpc, ":", . , " ", $file-name)); */
                    if ( .  == $file-name ) {
                        expr jcs:output(concat(" --- active syslog file:", $fpc, ":", . )); 
                        set $keep = 1;
                    }
                }
                for-each ($preserve/file) {
                    if ( $file-name == .) {
                        /* expr jcs:output(concat(" ==== PRESERVE FILE:", $fpc, ":", . )); */
                        set $keep = 1;
                    }
                }
            }
            if ( $keep == 0 ) {
                /* Delete the file */
                expr jcs:output(concat(" -- deleteing:", $fpc, ":", $file-name ));
                var $delete-file-result = cleanup:delete-file($fpc, ., $directory);
            } 
            else {
                /* preserve the file */
                expr jcs:output(concat(" -- preserving: ", $fpc, $directory, "/", $file-name ));
            }
        }
    }
}

/* function to recursively cleanup the cohntents of a directory
 * this takes the fpc (fpc0, fpc1, etc) and the file as an argument
 * as well as the direcotory name to be cleaned out
 */
function cleanup:cleanup-dir ( $fpc, $directory) { 

    /* set a mutable variable to keep track of if we deleted the file or not, -1 means not deleted, anything else is the file size 
     *  in bytes
     */
    mvar $deleted = -1;
    /* boolean to keep track of if file should be wiped or not */
    mvar $keep_this_file = 0;   


    /* get a list of the files in the directory provided */
    var $cleanup_files_rpc = {
        <file-list> {
            <path> concat($fpc,  $directory);
            <detail>;
        }
    }
    var $cleanup_files_result = jcs:invoke($local, $cleanup_files_rpc);

    /* iterate through the files list */
    for-each ($cleanup_files_result//directory-list/directory/file-information) {
        /* recursively remove directory */
        if (./file-directory ) {
            var $cleandelete_dir_rpc = {
                <delete-directory> {
                    <directory> concat($fpc, $directory, ./file-name);
                    <recurse>;
                }
            }
            var $cleandelete_result = jcs:invoke($local, $cleandelete_dir_rpc);
            if ($cleandelete_result//error) {
                for-each ($cleandelete_result//error) {
                    expr jcs:output(concat(" -- error ", $fpc, $subdir, "/", ./file-name, ": ", ./message ));
                }
            }
            else {
                /* successfully deleted the directory */
                expr jcs:output(concat(" -- recursively removed ", $fpc, $directory, "/", ./file-name));
            }
        }
        else {
            /* Delete the file */
            var $delete-file-result = cleanup:delete-file($fpc, ., $directory);
        }
    }
}

/* function to recursively delete a directory
 * this takes the fpc (fpc0, fpc1, etc) and the file as an argument
 * as well as the subdirecotory name in the /var/home dir that we are currently traversing
 * the file should be a file-information XML block
 */
function cleanup:delete-dir ( $fpc, $file-information, $subdir) { 

    /* set a mutable variable to keep track of if we deleted the file or not, -1 means not deleted, anything else is the file size 
     *  in bytes
     */
    mvar $deleted = -1;

    /* Debugging code 
    expr jcs:output(" - DEBUG deleteing directory ");
    expr jcs:output(concat("   X FPC:", $fpc));
    expr jcs:output(concat("   X subdir:", $subdir));
    expr jcs:output(concat("   -X file-name: ", $file-information/file-name));
    */
    /* if it's not a directory, don't do anything */
    if (not($file-information/file-directory)) {
       <func:result select="false()">;
    }
    else {
        /* Don't delete the .ssh dir  */
        if ( $file-information/file-name == ".ssh") {
            expr jcs:output(concat(" -- preserved ", $file-information/file-name ));
        }
        else {
            var $delete_dir_rpc = {
                <delete-directory> {
                    <directory> concat($fpc, "/var/home/", $subdir, "/", ./file-name);
                    <recurse>;
                }
            }
            var $delete_result = jcs:invoke($local, $delete_dir_rpc);
            if ($delete_result//error) {
                for-each ($delete_result//error) {
                    expr jcs:output(concat(" -- error ", $fpc, $subdir, "/", $file-information/file-name, ": ", ./message ));
                }
            }
            else {
                /* successfully deleted the directory */
                expr jcs:output(concat(" -- recursively removed ", $fpc, $subdir, "/", $file-information/file-name));
            }
        }
    }
}



/* function to delete a file
 * this takes the fpc (fpc0, fpc1, etc) and the file as an argument
 * the file should be a file-information XML block
 */
function cleanup:delete-file ( $fpc, $file-information, $directory) { 

    /* set a mutable variable to keep track of if we deleted the file or not, -1 means not deleted, anything else is the file size 
     *  in bytes
     */
    mvar $deleted = -1;

    /* Debugging code 
    expr jcs:output(" - DEBUG delete-file() ");
    expr jcs:output(concat("   X FPC:", $fpc));
    expr jcs:output(concat("   X directory: ", $directory));
    expr jcs:output(concat("   -X file-name: ", $file-information/file-name));
    */
    if (not($file-information/file-directory)) {
        /* don't delete any authorized_keys files */
        if ( not(./file-name == 'authorized_keys')) {
            var $delete_rpc = {
                    <file-delete> {
                        <path> concat($fpc, $directory, "/", $file-information/file-name);
                }
            }
            var $delete_result = jcs:invoke($local, $delete_rpc);
            if ($delete_result//error) {
                for-each ($delete_result//error) {
                    expr jcs:output(concat(" -- error ", $fpc, $directory, "/", $file-information/file-name, ": ", ./message ));
                }
            }
            else {
                /* successfully deleted the file */
                set $deleted = $delete_result;
                expr jcs:output(concat(" -- removed ", $fpc, $directory, "/", $file-information/file-name, ' ', $file-information/file-size, ' bytes'));
            }
        }
        else {
            expr jcs:output(concat("   - SKIP:             ", $file-information/file-name ));
        }
    }
    /*
    expr jcs:output(concat("   -X file-permissions: ", $file-information/file-permissions));
    expr jcs:output(concat("   -X file-owner: ", $file-information/file-owner));
    expr jcs:output(concat("   -X file-size: ", $file-information/file-size));
    */

    /* return results */
    if ($deleted == -1 ){
       <func:result select="false()">;
    }
    else {
       result $deleted;
    }

}


/* function to delete non-essential packages
 * this takes the vc member as an argument
 */
<func:function name="cleanup:packages"> {

    /* vc member */
    param $member;

    /* degree of package cleaning */
    param $aggressiveness;

    if ($aggressiveness == "lastresort"){
        expr jcs:output(" - aggressively deleteing non-essential Junos packages, you WILL need to upgrade Junos after this completes ");
	for-each ($del_packages_lastresort/package) {
	    expr jcs:output(concat(" -- removing package ", . ));
 	    var $rpc = {
	        <request-package-delete> {
	   	    <package-name> .;
		    <member> $member;
		}
 	    }
	    var $result = jcs:invoke($local,$rpc);

        }
        /* do a semi empty commit (just a commnet) to force a db sync in /var/run/db */
        var $cleanup_db = cleanup:commit();
    }
    else if ($aggressiveness == "aggressive"){
        expr jcs:output(" - deleteing optional Junos packages, you may need to upgrade Junos after this completes ");
	for-each ($del_packages_aggressive/package) {
	    expr jcs:output(concat(" -- removing package ", . ));
 	    var $rpc = {
	        <request-package-delete> {
	   	    <package-name> .;
		    <member> $member;
		}
 	    }
	    var $result = jcs:invoke($local,$rpc);

        }
        /* do a semi empty commit (just a commnet) to force a db sync in /var/run/db */
        var $cleanup_db = cleanup:commit();
    }
    else {
        expr jcs:output(" - deleteing non-essential Junos packages ");
	for-each ($del_packages/package) {
	    expr jcs:output(concat(" -- removing package ", . ));
 	    var $rpc = {
	        <request-package-delete> {
	   	    <package-name> .;
		    <member> $member;
		}
 	    }
	    var $result = jcs:invoke($local,$rpc);
        }
    }

}


/* function to delete non-recovery snapsnots from a member
 * this takes the vc member as an argument
 */
<func:function name="cleanup:snapshots"> {

    /* vc member */
    param $member;

    /* degree of cleaning */
    param $aggressiveness;

    if ($aggressiveness == "aggressive" || $aggressiveness == "lastresort"){
        /* Delete non-recovery snapshots */
        var $snapshot_rpc = {
            <request-snapshot> {
                <delete> '*';
                <member> $member;
            }
        }
        expr jcs:output(" - deleting snapshots");
        var $snapshot_result = jcs:invoke($local, $snapshot_rpc);
    }
}

/* function to delete recovery snapsnots from a member
 * this takes the vc member as an argument
 */ 
<func:function name="cleanup:recovery"> {
            
    /* vc member */
    param $member;

    /* Delete recovery snapshots */
    if ($aggressiveness == "aggressive" || $aggressiveness == "lastresort"){
        var $snapshot_rpc = {
            <request-snapshot> {
                <delete> 'recovery';
                <member> $member;
            }
        }
        expr jcs:output(" - deleting recovery");
        var $snapshot_result = jcs:invoke($local, $snapshot_rpc);
    }
}


/* function to do a system storage cleanup on a vc member 
 * this takes the vc member as an argument
 */
<func:function name="cleanup:storage"> {

    /* vc member */
    param $member;


    /* Standard request system storage cleanup */
    var $cleanup_rpc = {
        <request-system-storage-cleanup>;
        <member> $member;
    }
    expr jcs:output(" - system storage cleanup");
    var $cleanup_result = jcs:invoke($local, $cleanup_rpc);
    for-each ( $cleanup_result//multi-routing-engine-item/system-storage-cleanup-information/file-list/file ) {
        expr jcs:output(concat(' -- removed ', ./file-name, ' : ', ./size, ' bytes'));
    }
}


/*
 * function to delete the contents of the shmlog/arg dir
 * this needs the vc member (fpc) to run properly
 * and takes it as an argument
 */
<func:function name="cleanup:shmlog"> {

    /* fpc to operate on */
    param $fpc;

    /* Delete all files in /var/log/shmlog/arg/ */
    var $shmlog_files_rpc = {
        <file-list> {
            <path> concat($fpc, '/var/log/shmlog/arg');
        }
    }
    var $shmlog_files_result = jcs:invoke($local, $shmlog_files_rpc);

    for-each ($shmlog_files_result//directory-list/directory/file-information) {
       var $delete-file-result = cleanup:delete-file($fpc, ., "/var/log/shmlog/arg");
    }
} 


/*
 * function to save the DHCPv4 snooping file
 *
 */
<func:function name="cleanup:dhcpv4"> {

    /* feed configuration from the main loop */
    param $configuration;

    /* The location of the DHCP snooping file (if it is defined in the config */
    mvar $dhcp_snooping_file = $configuration/system/processes/dhcp-service/dhcp-snooping-file/location;
    if ($dhcp_snooping_file) {
        expr jcs:output(concat(" - found DHCPv4 snooping file location ", $dhcp_snooping_file));

        /* Check to see if this starts with an absolute path, if it doesn't the file will be saved in /var/tmp */
        if (not($dhcp_snooping_file[ starts-with(., "/") ])) {
            /* Relative path, prepend /var/tmp onto the save file name */
            set $dhcp_snooping_file = concat( "/var/tmp/", $dhcp_snooping_file);
        }

        /* Save the DHCP Snooping Database */
        expr jcs:output( concat(" - backing up the DHCPv4 Snooping Database ", $dhcp_snooping_file));
        var $save_dhcp_security_snooping_rpc = {
            <save-dhcp-security-snooping>{
                <filename> $dhcp_snooping_file;
            }
        }
        var $save_dhcp_security_snooping_result = jcs:invoke($local, $save_dhcp_security_snooping_rpc);
        expr jcs:output( " - DHCPv4 snooping file saved!" );
    }
    else {
        expr jcs:output(" - DHCPv4 snooping file location not configured ");
    }
}


/*
 * function to save the DHCPv6 snooping file
 *
 * this function takes the configuration as an argument
 *
 */
<func:function name="cleanup:dhcpv6"> {

    /* feed configuration from the main loop */
    param $configuration;

    /* The location of the DHCPv6 snooping file (if it is defined in the config */
    mvar $dhcpv6_snooping_file = $configuration/system/processes/dhcp-service/dhcpv6-snooping-file/location;
    if ($dhcpv6_snooping_file) {
        expr jcs:output(concat(" - found DHCPv6 snooping file location ", $dhcpv6_snooping_file));

        /* Check to see if this starts with an absolute path, if it doesn't the file will be saved in /var/tmp */
        if (not($dhcpv6_snooping_file[ starts-with(., "/") ])) {
            /* Relative path, prepend /var/tmp onto the save file name */
            set $dhcpv6_snooping_file = concat( "/var/tmp/", $dhcpv6_snooping_file);
        }

        /* Save the DHCP Snooping Database */
        expr jcs:output( concat(" - backing up the DHCPv6 Snooping Database ", $dhcpv6_snooping_file));
        var $save_dhcpv6_security_snooping_rpc = {
            <save-dhcpv6-security-snooping>{
                <filename> $dhcpv6_snooping_file;
            }
        }
        var $save_dhcpv6_security_snooping_result = jcs:invoke($local, $save_dhcpv6_security_snooping_rpc);
        expr jcs:output( " - DHCPv6 snooping file saved!" );
    }
    else {
        expr jcs:output(" - DHCPv6 snooping file location not configured ");
    }
}



/* function to save the SLAAC snooping database 
 * this needs the relevant config section to work properly
 */
<func:function name="cleanup:slaac"> {
    /* feed configuration from the main loop */
    param $configuration;

    /* The location of the SLAAC snooping file (if it is defined in the config */
    mvar $slaac_snooping_file = $configuration/system/processes/slaac-snoopd-service/persistent-file/location;
    if ($slaac_snooping_file) {
        expr jcs:output(concat(" - found SLAAC snooping file location ", $slaac_snooping_file));

        /* Check to see if this starts with an absolute path, if it doesn't the file will be saved in /var/tmp */
        if (not($slaac_snooping_file[ starts-with(., "/") ])) {
            /* Relative path, prepend /var/tmp onto the save file name */
            set $slaac_snooping_file = concat( "/var/tmp/", $slaac_snooping_file);
        }

        /* Save the DHCP Snooping Database */
        expr jcs:output( concat(" - backing up the SLAAC Snooping Database ", $slaac_snooping_file));
        var $save_slaac_snoop_file_rpc = {
            <save-slaac-snoop-file>{
                <filename> $slaac_snooping_file;
            }
        }
        var $save_slaac_snoop_file_result = jcs:invoke($local, $save_slaac_snoop_file_rpc);
        expr jcs:output( " - SLAAC snooping file saved!" );
    }
    else {
        expr jcs:output(" - SLAAC snooping file location not configured ");
    }

    /* Regenerate Persistent Storage for DHCP */
    expr jcs:output( "Regenerating DHCP Persistent Storage:" );
    var $request_dhcp_regenerate_persistent-file_rpc = {
        <request-dhcp-regenerate-persistent-file>;
    }
    var $request_dhcp_regenerate_persistent-file_result = jcs:invoke($local, $request_dhcp_regenerate_persistent-file_rpc);
    expr jcs:output( " - regenerated!" );

}

/*
 * function to do a commit to try to keep the juniper.db database in sync
 */
<func:function name="cleanup:commit"> {

        expr jcs:output( "Syncing /var/run/db with a commit" );

        /* empty config change */
        var $config-changes = {
           <configuration> {
              <junos:comment> "free_up_space /var/run/db sync";
           }
        }

        var $load-action = "merge";
        var $options := {
         <commit-options> {
             <log> "Issuing commit to update /var/run/junper.db sequence number";
          }
        }

        expr jcs:output( "Commiting comment to update db versions." );
        var $func_results := {
           call jcs:load-configuration( $action=$load-action,
             $commit-options=$options,
             $configuration=$config-changes, $connection=$local);
        }

        expr jcs:output( "Commited." );

} 

/*
 * function to report any active trace files
 */
<func:function name="cleanup:report-tracefiles"> {

   expr jcs:output( "Looking for active trace files:" );
   /* keep track of if we found an active traceoptin or not */
   mvar $tracefiles = 0;

   var $get-full-config-rpc = <get-configuration database="committed" inherit="inherit"> ;
   var $config = jcs:invoke( $get-full-config-rpc);
   for-each ($config//traceoptions/file/filename ) {
        expr jcs:output( concat(" *** WARNING active tracefile: ", .) );
        set $tracefiles = 1;
   }

   if ( $tracefiles == 1 ) {
        expr jcs:output(" - consider deleting or deactivating any traceoptions that are not needed!");
   }
   else {
        expr jcs:output(" - no active tracefiles found ");
   }

}
